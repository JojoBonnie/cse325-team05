@page "/tasks"
@using team_project.Services
@using team_project.Models
@inject TaskService taskService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer


<div class="top-bar">
    <div class="logout-container">
        <LogoutButton />
    </div>
</div>

<div class="task-form-container">
    <h2 class="task-title">Task Tracker</h2>

    <form id="task-form">
        <div>
            <label class="form-label" for="taskName">Task Name</label>
            <input class="form-input" type="text" @bind="taskName" @bind:event="oninput" id="taskName" name="TaskName" required minlength="5" maxlength="50"/>
        </div>
        <div>
            <label class="form-label" for="description">Description</label>
            <textarea class="form-input" @bind="description" @bind:event="oninput" id="description" name="Description" required minlength="10" maxlength="200"></textarea>
        </div>
        <div>
            <label class="form-label" for="dueDate">Due Date</label>
            <input class="form-input" type="date" @bind="dueDate" @bind:event="oninput" id="dueDate" name="DueDate" required/>
        </div>
        <div>
            <label class="form-label" for="priority">Priority</label>
            <select class="form-input" @bind="priority" @bind:event="oninput" id="priority" name="Priority" required>
                <option value="Low">Low</option>
                <option value="Medium">Medium</option>
                <option value="High">High</option>
            </select>
        </div>
        <span class="message">@message</span>
        <button class="submit-btn" type="button" @onclick=" () => {if(editTask){UpdateTask();} else{AddTask(); }}">@(editTask? "Update" : "Add Task")</button>
    </form>
</div>



<div class="task-cards-container">
    @foreach(var task in tasks)
    {
        <div class="task-card">
            <div>
                <button @onclick="() => DeleteTask(task.Id)">Delete</button>
                <button @onclick="() =>  EditTask(task.Id)">Edit</button>
            </div>
            <h3>@task.TaskName</h3>
            <p>@task.Description</p>
            <p><strong>Due Date:</strong> @task.DueDate.ToShortDateString()</p>
            <p><strong>Priority:</strong> @task.Priority</p>
            @if (task.IsCompleted) {
                <p><strong>Status:</strong>Completed</p>
            }
            else {
                <p><strong>Status:</strong>Pending</p>
                <button @onclick="() => CompleteTask(task.Id)">Mark as Completed</button>
            }
        </div>
    }
</div>

@code {
    private string id;
    private string taskName;
    private string description;
    private DateTime dueDate = DateTime.Now;
    private string priority;
    private string message = "Here we go!";  // Default message to check that the UI displays it
    private bool isCompleted = false;
    private bool editTask = false;
    private List<TaskItem> tasks;

    protected override async Task OnInitializedAsync()
    {
        tasks = taskService.GetTasks();
    }

    private void AddTask()
    {

        if (string.IsNullOrWhiteSpace(taskName) || string.IsNullOrWhiteSpace(description))
        {
            message = "Please fill in all required fields.";
            StateHasChanged();
            return;
        }

        var result = taskService.CreateTask(
            taskName,
            description,
            priority,
            dueDate,
            isCompleted
        );

        if (result == "Success")
        {
            message = "Task added successfully!";
            ClearTaskFields();
            tasks = taskService.GetTasks(); 
        }

        else
        {
            message = "Error: " + result;
        }
        
        StateHasChanged();
    }

    private void DeleteTask(string id) {
        taskService.DeleteTask(id);
        tasks = taskService.GetTasks(); 
        StateHasChanged();
    }

    private async void EditTask(string id) {
      
        TaskItem currTask = taskService.GetTaskById(id);
        id = currTask.Id;
        taskName = currTask.TaskName;
        description = currTask.Description;
        dueDate = currTask.DueDate;
        priority = currTask.Priority;
        isCompleted = currTask.IsCompleted;
        editTask = true;
        await ScrollToTaskForm("task-form");
    }

    private void UpdateTask() {
        taskService.UpdateTask(new TaskItem {Id = id, TaskName = taskName, Description = description, DueDate = dueDate, IsCompleted = isCompleted, Priority = priority});
        editTask = false;
        ClearTaskFields();
        StateHasChanged();
    }

    private async Task ScrollToTaskForm(string id)
    {
        // JavaScript to scroll to the task form
        await JSRuntime.InvokeVoidAsync("scrollToElement", id);
    }

    private void CompleteTask(string id) {
        taskService.CompleteTask(id);
        StateHasChanged();
    }

    private void ClearTaskFields() {
        taskName = "";
        description = "";
        dueDate = DateTime.Now;
        priority = "";
        isCompleted = false;

    }
}
