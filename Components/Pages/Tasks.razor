@page "/tasks"
@using team_project.Models
@using team_project.Services
@inject TaskService TaskService

<PageTitle>Task Tracker</PageTitle>

<h3>Task Tracker</h3>

<button @onclick="AddNewTask" class="btn btn-primary">Add New Task</button>

@if (showTaskForm)
{
    <div class="task-form">
        <h4>Create or Edit Task</h4>
        <input type="text" @bind="taskModel.Title" placeholder="Title" class="form-control" />
        <input type="text" @bind="taskModel.Description" placeholder="Description" class="form-control" />
        <input type="text" @bind="taskModel.Priority" placeholder="Priority (High, Medium, Low)" class="form-control" />
        <input type="date" @bind="taskModel.Deadline" class="form-control" />
        <input type="text" @bind="taskModel.Category" placeholder="Category" class="form-control" />
        <div class="form-check">
            <input type="checkbox" @bind="taskModel.IsCompleted" class="form-check-input" id="isCompletedCheck" />
            <label class="form-check-label" for="isCompletedCheck">Completed</label>
        </div>
        <button @onclick="SaveTask" class="btn btn-success">Save</button>
        <button @onclick="CancelTask" class="btn btn-secondary">Cancel</button>
    </div>
}

<div class="task-dashboard">
    @foreach (var task in TaskService.GetTasks())
    {
        <div class="task-card">
            <h4>@task.Title</h4>
            <p>@task.Description</p>
            <p><strong>Priority:</strong> @task.Priority</p>
            <p><strong>Deadline:</strong> @task.Deadline.ToShortDateString()</p>
            <p><strong>Category:</strong> @task.Category</p>
            <p><strong>Completed:</strong> @task.IsCompleted</p>
            <button @onclick="() => EditTask(task)" class="btn btn-secondary">Edit</button>
            <button @onclick="() => DeleteTask(task.Id)" class="btn btn-danger">Delete</button>
        </div>
    }
</div>

@code {
    private bool showTaskForm = false;
    private TaskItem taskModel = new TaskItem();
    
    private void AddNewTask()
    {
        showTaskForm = true;
        taskModel = new TaskItem();
        StateHasChanged();
    }

    private void EditTask(TaskItem task)
    {
        showTaskForm = true;
        taskModel = new TaskItem
        {
            Id = task.Id,
            Title = task.Title,
            Description = task.Description,
            Priority = task.Priority,
            Deadline = task.Deadline,
            Category = task.Category,
            IsCompleted = task.IsCompleted
        };
        StateHasChanged();
    }

    private void DeleteTask(string taskId)
    {
        TaskService.DeleteTask(taskId);
        StateHasChanged();
    }

    private void SaveTask()
    {
        if (string.IsNullOrEmpty(taskModel.Id))
        {
            // Creating a new task
            TaskService.CreateTask(taskModel);
        }
        else
        {
            // Updating an existing task
            TaskService.UpdateTask(taskModel);
        }

        showTaskForm = false;
        StateHasChanged();
    }

    private void CancelTask()
    {
        showTaskForm = false;
        StateHasChanged();
    }
}
