@page "/tasks"
@using team_project.Services
@using team_project.Models
@inject TaskService taskService

<div class="task-form-container">
    <h2 class="task-title">Task Tracker</h2>

    <form @onsubmit="AddTask">
        <div>
            <label class="form-label" for="taskName">Task Name</label>
            <input class="form-input" type="text" @bind="taskName" @bind:event="oninput" id="taskName" name="TaskName" required minlength="5" maxlength="50"/>
        </div>
        <div>
            <label class="form-label" for="description">Description</label>
            <textarea class="form-input" @bind="description" @bind:event="oninput" id="description" name="Description" required minlength="10" maxlength="200"></textarea>
        </div>
        <div>
            <label class="form-label" for="dueDate">Due Date</label>
            <input class="form-input" type="date" @bind="dueDate" @bind:event="oninput" id="dueDate" name="DueDate" required/>
        </div>
        <div>
            <label class="form-label" for="priority">Priority</label>
            <select class="form-input" @bind="priority" @bind:event="oninput" id="priority" name="Priority" required>
                <option value="Low">Low</option>
                <option value="Medium">Medium</option>
                <option value="High">High</option>
            </select>
        </div>
        <span class="message">@message</span>
        <button class="submit-btn" type="submit">Add Task</button>
    </form>
</div>

<div class="task-cards-container">
    @foreach (var task in tasks)
    {
        <div class="task-card">
            <h3>@task.TaskName</h3>
            <p>@task.Description</p>
            <p><strong>Due Date:</strong> @task.DueDate.ToShortDateString()</p>
            <p><strong>Priority:</strong> @task.Priority</p>
            <p><strong>Status:</strong> @(task.IsCompleted ? "Completed" : "Pending")</p>
        </div>
    }
</div>

@code {
    private string taskName;
    private string description;
    private DateTime dueDate;
    private string priority;
    private string message = "";
    private List<TaskItem> tasks = new();

    protected override void OnInitialized()
    {
        tasks = taskService.GetTasks();
    }

    private void AddTask()
    {
        var result = taskService.CreateTask(new TaskItem
        {
            TaskName = taskName,
            Description = description,
            DueDate = dueDate,
            Priority = priority
        });

        if (result == "Success")
        {
            message = "Task added successfully!";
            tasks = taskService.GetTasks(); // Refresh the task list
        }
        else
        {
            message = result;
        }
    }
}